{
  "swagger" : "2.0",
  "info" : {
    "title" : "Controller API for Amalgam8",
    "description": "The controller provides APIs to the developer for configuring rules for request routing, fault injection, etc.",
    "version" : "0.2"
  },
  "schemes" : [ "https" ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "paths" : {
    "/health" : {
      "parameters" : [ ],
      "get" : {
        "tags" : [ ],
        "summary" : "Status of the controller",
        "description" : "Returns status of the controller",
        "responses" : {
          "200" : {
            "description" : "Controller is healthy"
          },
          "503": {
            "description" : "Controller is unhealthy"
          }
        }
      }
    },
    "/v1/tenants" : {
      "parameters" : [
        {
          "name": "token",
          "in": "header",
          "description": "Tenant token",
          "type": "string",
          "required": true
        }
      ],
      "post" : {
        "tags" : [ ],
        "summary" : "Register a tenant",
        "description" : "Registers a tenant with the controller",
        "parameters" : [
          {
            "name": "token",
            "in": "header",
            "description": "Tenant token",
            "type": "string",
            "required": true
          },
          {
            "name": "tenant",
            "in": "body",
            "description": "Tenant information",
            "schema": {
              "$ref": "#/definitions/tenant"
            },
            "required": true
          }
        ],
        "responses" : {
          "201" : {
            "description" : "Tenant registered"
          },
          "400" : {
            "description" : "Invalid request"
          },
          "409" : {
            "description" : "Tenant already registered"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "get" : {
        "tags" : [ ],
        "summary" : "Configuration of a tenant",
        "description" : "Returns the configuration of a tenant",
        "responses" : {
          "200" : {
            "description" : "Tenant information",
            "schema" : {
              "$ref" : "#/definitions/tenant"
            }
          },
          "404" : {
            "description" : "No information exists for tenant ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "put" : {
        "tags" : [ ],
        "summary" : "Update tenant information",
        "description" : "Updates the configuration of a tenant",
        "parameters" : [
          {
            "name": "tenant_info",
            "in": "body",
            "description": "Information to update",
            "schema": {
              "$ref": "#/definitions/tenant"
            },
            "required": true
          }
        ],
        "responses" : {
          "200" : {
            "description" : "Tenant info successfully updated"
          },
          "400" : {
            "description" : "Malformed JSON in request"
          },
          "404" : {
            "description" : "No information exists for tenant ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "delete" : {
        "tags" : [ ],
        "summary" : "Unregisters a tenant",
        "description" : "Unregisters a tenant",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Tenant successfully deleted"
          },
          "404" : {
            "description" : "No information exists for tenant ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      }
    },
    "/v1/rules" : {
      "parameters" : [
        {
          "name": "token",
          "in": "header",
          "description": "Tenant token",
          "type": "string",
          "required": true
        }
      ],
      "get" : {
        "tags" : [ ],
        "summary" : "Gets rules for a tenant",
        "description" : "Gets rules for a given tenant. If query parameters are provided, the results are filtered based on the query parameters. Otherwise all rules for a given tenant are returned. Query parameters can be repeated to query for multiple rules.",
        "parameters" : [
          {
            "name": "id",
            "in": "query",
            "description": "Rule ID",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved rules",
            "schema" : {
              "$ref" : "#/definitions/rules"
            }
          },
          "404" : {
            "description" : "One or more rule was not found"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },

      "post" : {
        "summary" : "Adds rules to a tenant",
        "description" :"Adds rules to a tenant. Rules are added transactionally; on a failure, no rules are added.",
        "parameters" : [
          {
            "name": "rules",
            "in": "body",
            "description": "Rules",
            "schema": {
              "$ref": "#/definitions/rules"
            },
            "required": true
          }
        ],
        "responses" : {
          "200" : {
            "description" : "Successfully created rules",
            "schema" : {
              "$ref" : "#/definitions/in_rules"
            }
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },

      "delete" : {
        "summary" : "Removes rules from a tenant",
        "description" : "Removes rules from a tenant. Rules are removed transactionally; on a failure, no rules are removed. If query parameters are provided, only rules matching the parameters will be removed. If no query parameters are provided, all rules are removed",
        "parameters" : [
          {
            "name": "id",
            "in": "query",
            "description": "Rule ID",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses" : {
          "200" : {
            "description" : "Successfully removed rules"
          },
          "404" : {
            "description" : "One or more rule was not found"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      }
    },

    "/v1/versions/{service}" : {
      "parameters" : [
        {
          "name": "token",
          "in": "header",
          "description": "Tenant token",
          "type": "string",
          "required": true
        },
        {
          "name": "service",
          "in": "path",
          "description": "Service Name",
          "type": "string",
          "required": true
        }
      ],
      "get" : {
        "tags" : [ ],
        "summary" : "Returns the service version rules for a tenant",
        "description" : "Returns the version filter for a tenant for a service",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully retrieved version filter",
            "schema" : {
              "$ref" : "#/definitions/version"
            }
          },
          "404" : {
            "description" : "No information exists for tenant ID or service name"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "put" : {
        "tags" : [ ],
        "summary" : "Create a service version filter for a tenant",
        "description" : "Creates a version filter for a tenant for a service",
        "parameters" : [
          {
            "name": "version",
            "in": "body",
            "description": "New version filter for tenant",
            "schema": {
              "$ref": "#/definitions/version"
            },
            "required": true
          }
        ],
        "responses" : {
          "200" : {
            "description" : "Successfully created version filter"
          },
          "400" : {
            "description" : "Missing or invalid JSON"
          },
          "404" : {
            "description" : "No information exists for tenant ID"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      },
      "delete" : {
        "tags" : [ ],
        "summary" : "Delete the service version filter for a tenant",
        "description" : "Deletes the service version filter for a tenant",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successfully deleted version filter"
          },
          "404" : {
            "description" : "No information exists for tenant ID or service name"
          },
          "503" : {
            "description" : "Error communicating with database"
          }
        }
      }
    }
  },
  "definitions" : {
    "tenant" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "ID of tenant"
        },
        "port" : {
          "type" : "integer",
          "description" : "NGINX port"
        },
        "load_balance" : {
          "type" : "string",
          "description" : "Load balancing algorithm for tenant"
        },
        "filters" : {
          "$ref" : "#/definitions/filter"
        }
      }
    },
    "filter" : {
      "properties" : {
        "rules" : {
          "type" : "array",
          "description" : "delay filters for tenant",
          "items" : {
            "$ref" : "#/definitions/rule"
          }
        },
        "versions" : {
          "type" : "array",
          "description" : "abort filters for tenant",
          "items" : {
            "$ref" : "#/definitions/version"
          }
        }
      }
    },
    "in_rules" : {
      "properties": {
        "rules" : {
          "type" : "array",
          "description" : "rules",
          "items" : {
            "$ref" : "#/definitions/in_rule"
          }
        }
      }
    },
    "in_rule" : {
      "properties" : {
        "source" : {
          "type" : "string",
          "description" : "Service name of request source"
        },
        "destination" : {
          "type" : "string",
          "description" : "Service name of request destination"
        },
        "pattern" : {
          "type" : "string",
          "description" : "Header pattern"
        },
        "delay" : {
          "type" : "number",
          "description" : "Delay in seconds"
        },
        "delay_probability" : {
          "type" : "number",
          "description" : "Delay probability in range [0.0, 1.0]"
        },
        "abort_probability" : {
          "type" : "number",
          "description" : "Abort probability in range [0.0, 1.0]"
        },
        "return_code" : {
          "type" : "integer",
          "description" : "Failure code returned by abort"
        }
      }
    },
    "rules" : {
      "properties": {
        "rules" : {
          "type" : "array",
          "description" : "rules",
          "items" : {
            "$ref" : "#/definitions/rule"
          }
        }
      }
    },
    "rule" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Rule ID"
        },
        "source" : {
          "type" : "string",
          "description" : "Service name of request source"
        },
        "destination" : {
          "type" : "string",
          "description" : "Service name of request destination"
        },
        "header" : {
          "type" : "string",
          "description" : "Header name"
        },
        "pattern" : {
          "type" : "string",
          "description" : "Header pattern"
        },
        "delay" : {
          "type" : "number",
          "description" : "Delay in seconds"
        },
        "delay_probability" : {
          "type" : "number",
          "description" : "Delay probability in range [0.0, 1.0]"
        },
        "abort_probability" : {
          "type" : "number",
          "description" : "Abort probability in range [0.0, 1.0]"
        },
        "return_code" : {
          "type" : "integer",
          "description" : "Failure code returned by abort"
        }
      }
    },
    "version" : {
      "properties" : {
        "service" : {
          "type" : "string",
          "description" : "Service to apply versioning to"
        },
        "default" : {
          "type" : "string",
          "description" : "Default Service version to use"
        },
        "selector" : {
          "type" : "object",
          "description" : "Version selector"
        }
      }
    }
  }
}
